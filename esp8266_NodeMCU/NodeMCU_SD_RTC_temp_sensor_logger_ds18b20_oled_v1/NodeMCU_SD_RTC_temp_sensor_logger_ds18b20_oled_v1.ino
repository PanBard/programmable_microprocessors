/*the circuit for esp8266_nodemcu:

SD card attached to SPI bus as follows:
    MOSI --> pin D7
    MISO --> pin D6
    CLK --> pin D5
    CS --> pin D8 

RTC CONNECTIONS:
    DS1302 CLK/SCLK --> D4 
    DS1302 DAT/IO --> D3 
    DS1302 RST/CE --> D2 
    DS1302 VCC --> 3.3v - 5v
    DS1302 GND --> GND
 */

#include <ThreeWire.h>  //lib: Rtc by Makuna (by Michael C. Miller)
#include <RtcDS1302.h>  //lib: Rtc by Makuna (by Michael C. Miller)
#include <SPI.h>
#include <SD.h>
#include <Wire.h> //for sda, scl define
#include <OneWire.h> //for ds18b20
#include <DallasTemperature.h> //for ds18b20 (rem about 4.7k ohm resistor)
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <Wire.h> //for sda, scl define

ThreeWire myWire(D3,D4,D2); //DS1302 -> DAT, SCLK, RST
RtcDS1302<ThreeWire> Rtc(myWire);
char datestring[20];
char timeString[10];


//-------------------
File myFile;
String str;

int number = 0;
int delay_work_time = 1000;
int delay_error_time = 2000;
long total_seconds_for_check = 0;
long start_work_time = 0;
int time_difference;
RtcDateTime time_from_RTC;
int log_counter = 0;

//------------------- MANUALLY SETUP 
String file_name = "test_5.txt"; 
int time_for_log_save = 3600; // interval for log save (in seconds)
//------------------- MANUALLY SETUP 

//-------------DS18B20 setup
#define ONE_WIRE_BUS 5 // Data wire is plugged into port D1  on the nodemcu esp8266
OneWire oneWire(ONE_WIRE_BUS); // Pass our oneWire reference to Dallas Temperature. // Setup a oneWire instance to communicate with any OneWire devices (not just Maxim/Dallas temperature ICs)
DallasTemperature sensors(&oneWire); // Pass our oneWire reference to Dallas Temperature. 
float tempC; //temp value in celsius
//-------------DS18B20 setup

// OLED setup ---------------------
Adafruit_SSD1306 display(128, 64, &Wire, -1); 
// OLED setup ---------------------

void setup () 
{
    Serial.begin(9600);

    Rtc.Begin();
    SDCardInitialization();

    pinMode(LED_BUILTIN, OUTPUT); // Initialize the LED_BUILTIN pin as an output
    digitalWrite(LED_BUILTIN, HIGH);  // Turn the LED off by making the voltage HIGH   

    set_start_time();

    // OLED setup ---------------------
    Wire.begin(3, 1); //Wire.begin(I2C_SDA, I2C_SCL); sda -> RX , scl -> TX on nodemcu esp8266
    display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
    // if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { //See datasheet for Address; 0x3D for 128x64, 0x3C for 128x32
    //   Serial.println(F("SSD1306 allocation failed"));
    //   for(;;); // Don't proceed, loop forever
    // }
    // OLED setup ---------------------
    displayTransformersLogo();
}

void loop () 
{

  if(checkIfIsTimeToMakeLog()){
    read_temperature();
    writeToLog();   
  }
  blink(2);
  // Serial.println("Waiting... timer="+String(count_current_time)+"s "+"(waiting "+calculateTimeFromSecond()+ ")");
  display_temp();
  delay(delay_work_time);
}

void set_start_time()
{
  time_from_RTC = Rtc.GetDateTime();
  start_work_time = time_from_RTC.TotalSeconds();
}

int get_working_time()
{
  time_from_RTC = Rtc.GetDateTime();
  return time_from_RTC.TotalSeconds() - start_work_time;
}



bool checkIfIsTimeToMakeLog() //return true when is time if not return false 
{
  time_from_RTC = Rtc.GetDateTime();
  time_difference = time_from_RTC.TotalSeconds() - total_seconds_for_check;
  // Serial.println("Total first set seconds: "+ String(total_seconds_for_check));
  // Serial.println("Total current seconds: "+ String(time_from_RTC.TotalSeconds()));
  // Serial.println("Setup seconds: "+ String(time_for_log_save));
  // Serial.println("Different seconds: "+ String(time_difference));
  if (time_difference >= time_for_log_save)
  {
    return true;
  }
  else
  {
    return false;
  }
}

String getTimeFromRTC() //return all: date and time [day-month-year hh-mm-ss]
{
    time_from_RTC = Rtc.GetDateTime();

    snprintf_P(datestring, 
            countof(datestring),
            PSTR("%02u-%02u-%04u %02u:%02u:%02u"),            
            time_from_RTC.Day(),
            time_from_RTC.Month(),
            time_from_RTC.Year(),
            time_from_RTC.Hour(),
            time_from_RTC.Minute(),
            time_from_RTC.Second() );   
         
    return String(datestring);
}

String getTimeFromRTC_time_alone() //return only time: [hh-mm-ss]
{
    time_from_RTC = Rtc.GetDateTime();

    snprintf_P(timeString, 
            countof(timeString),
            PSTR("%02u:%02u:%02u"),            
            time_from_RTC.Hour(),
            time_from_RTC.Minute(),
            time_from_RTC.Second() );   
         
    return String(timeString);
}

String getTimeFromRTC_date_alone() //return only date: [day-month-year]
{
    time_from_RTC = Rtc.GetDateTime();

    snprintf_P(timeString, 
            countof(timeString),
            PSTR("%02u-%02u-%04u"),            
            time_from_RTC.Day(),
            time_from_RTC.Month(),
            time_from_RTC.Year() );  
         
    return String(timeString);
}


//////--------------------------------------------

void SDCardInitialization()
{
  Serial.print("Initializing SD card...");
  if (!SD.begin(D8)) {
    Serial.println("initialization failed!");
    return;
  }
  writeFirstLogToFile();
  Serial.println("initialization done.");
}

void writeFirstLogToFile(){
  myFile = SD.open(file_name, FILE_WRITE);
  
  if (myFile) { // if the file opened okay, write to it:              
    str = "Device started at " + getTimeFromRTC();   
    myFile.println(str);    
    myFile.close(); // close the file
    blink(10);
    Serial.println("Writing ***{"+ str +"}*** to --> "+ file_name + " is done.");
  }
  else
  {// if the file didn't open, print an error:    
    Serial.println("error opening "+file_name + " ; time: "+ getTimeFromRTC() +" waiting "+String(delay_error_time/1000) + "s");
    delay(delay_error_time);
  }
}

void writeToLog(){ 
  myFile = SD.open(file_name, FILE_WRITE);
  if (myFile) { // if the file opened okay, write to it:              
    str = getStringWithLogData();   
    myFile.println(str);    
    myFile.close(); // close the file
    blink(10);
    Serial.println("Writing ***{"+ str +"}*** to --> "+ file_name + " is done.");
    time_from_RTC = Rtc.GetDateTime();
    total_seconds_for_check = time_from_RTC.TotalSeconds();
    log_counter += 1;
    
  } else {// if the file didn't open, print an error:    
    Serial.println("error opening "+file_name + " ; time: "+ getTimeFromRTC() +" waiting "+String(delay_error_time/1000) + "s");
    delay(delay_error_time);
  }
}

String getStringWithLogData() {
  number +=1;  
  return "[Log nr: " + String(number) +"] ;"+ " time: "+ getTimeFromRTC() +"|"+"temp: "+String(tempC)+"st.C";
}

void blink(int miliSeconds) {
    digitalWrite(LED_BUILTIN, LOW);   // Turn the LED on by making the voltage LOW
    delayMicroseconds(miliSeconds);                      // Wait for a second
    digitalWrite(LED_BUILTIN, HIGH);  // Turn the LED off by making the voltage HIGH                       
}

String calculateTimeFromSecond() 
{
  return String(time_for_log_save/3600) + "h "+ String((time_for_log_save%3600)/60) + "min " + String(time_for_log_save%60) + "s "; 
}

void read_temperature(){
  sensors.requestTemperatures(); // Send the command to get temperatures
  tempC = sensors.getTempCByIndex(0);//get the temperature from the first sensor only ByIndex
  if(tempC != DEVICE_DISCONNECTED_C){ // Check if reading was successful
    Serial.print("Temperature: ");
    Serial.println(tempC);
  } 
  else
  { Serial.println("Error: Could not read temperature data"); }
}


// ---------------------OLED methods:

void display_temp(){
   display.clearDisplay(); // Clear display buffer
    display.setTextSize(1); // Draw 2X-scale text
  display.setTextColor(SSD1306_WHITE);
    display.setCursor(1, 5);
    display.println(F("Temp.:")); 
    display.setCursor(50, 5);
    // display.setTextSize(2); // Draw 2X-scale text
    display.println(tempC);
    display.setCursor(85, 5);
    display.println("st.C");
    display_working_time();
    display_time();
    display_counter();
    display.display(); // Update screen
}

void display_time(){
    display.setTextSize(1); // Draw 2X-scale text
    display.setTextColor(SSD1306_WHITE);
    display.setCursor(1, 25);
    display.println(F("Time:")); 
    display.setCursor(50, 25);
    display.println(getTimeFromRTC_time_alone());

    display.setCursor(1, 35);
    display.println(F("Date:")); 
    display.setCursor(50, 35);
    display.println(getTimeFromRTC_date_alone());
    // display.setCursor(60, 30);
    // display.println(String(((counter*sleep_time)%3600)/60)+F("m"));
    // display.setCursor(85, 30);
    // display.println(String((counter*sleep_time)%60)+F("s"));
    // calculate_counter_and_time();
}

void display_working_time(){
    display.setTextSize(1); // Draw 2X-scale text
    display.setTextColor(SSD1306_WHITE);
    display.setCursor(1, 15);
    display.println(F("Work time:")); 
    display.setCursor(65, 15);
    display.println(String(get_working_time()/3600)+F("h"));
    display.setCursor(80, 15);
    display.println(String((get_working_time()%3600)/60)+F("m"));
    display.setCursor(95, 15);
    display.println(String(get_working_time()%60)+F("s"));
    
}

void display_counter(){
    display.setCursor(1, 45);
    display.println(F("Nr pom.:")); 
    display.setCursor(53, 45);
    display.println(log_counter);

    
    // display.println(log_counter);
}

// void calculate_counter_and_time(){
//     counter=counter+1;
// }

const unsigned char Autobot_logo [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 
	0xff, 0xbf, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 
	0xbf, 0xff, 0xff, 0xff, 0xfd, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xfd, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xdf, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xdf, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xdf, 0xfc, 0x00, 0x3f, 
	0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xef, 0xff, 0x00, 0x7f, 0xfb, 
	0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf7, 0xff, 0x81, 0xff, 0xef, 0xff, 
	0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf9, 0xf9, 0xff, 0xe3, 0xff, 0xdf, 0xdf, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xfe, 0xff, 0xf7, 0xff, 0x3f, 0x3f, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x3f, 0x3f, 0xff, 0xfe, 0xfe, 0x7f, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x9f, 0xdf, 0xff, 0xf9, 0xfd, 0xff, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x7f, 0xe7, 0xe7, 0xff, 0xf7, 0xf3, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x7d, 0xf3, 0xfb, 0xff, 0xcf, 0xcf, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x7e, 0x7d, 0xf8, 0xff, 0x9f, 0x9f, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x3f, 0xbe, 0x7e, 0x3e, 0x7f, 0x7c, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x3f, 0xcf, 0xff, 0x9d, 0xfe, 0xfb, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 
	0xe7, 0xfd, 0xe3, 0xff, 0xf7, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf9, 
	0xfd, 0xff, 0xff, 0xcf, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xfe, 0xfd, 
	0xff, 0xff, 0x3f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0x7d, 0xff, 
	0xfe, 0x7f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xd0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0xff, 0xfe, 0xff, 0xbf, 0xff, 
	0xb0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x7f, 0xfe, 0xff, 0xbf, 0xfe, 0x70, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xfe, 0xff, 0xbf, 0xff, 0xf0, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xe0, 0x7e, 0xff, 0xbf, 0x03, 0xf0, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xe0, 0x02, 0xff, 0x20, 0x03, 0xf0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xe0, 0x00, 0xff, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x0f, 0xe0, 0x02, 0xff, 0x40, 0x07, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x0f, 0xf8, 0x0e, 0xff, 0x70, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x07, 0xfe, 0x3f, 0xff, 0x7e, 0x3f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x07, 0xfe, 0xff, 0xff, 0x7f, 0x7f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x07, 0xfe, 0xff, 0xff, 0x7f, 0x7f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 
	0xfe, 0xff, 0xff, 0x7f, 0x7f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfe, 
	0xff, 0xff, 0x7f, 0x7f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfe, 0xff, 
	0xff, 0x7f, 0x7f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfe, 0xff, 0xff, 
	0x7f, 0x7f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfe, 0xff, 0xff, 0x7f, 
	0x7f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfe, 0xff, 0xff, 0x7f, 0x7f, 
	0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfe, 0xff, 0xff, 0x7f, 0x7f, 0xf0, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfe, 0xff, 0xff, 0x7f, 0x7f, 0xf0, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfe, 0xff, 0x7f, 0x7f, 0x7f, 0xe0, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfe, 0xff, 0xff, 0xff, 0x7f, 0xe0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfe, 0xff, 0xff, 0xff, 0x7f, 0xe0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x03, 0xfe, 0xff, 0xff, 0xff, 0x7f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff, 0x7f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x7e, 0xff, 0xff, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x3e, 0xfe, 0x00, 0x3f, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x1e, 0xfd, 0xff, 0xbf, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x06, 0xfd, 0xff, 0xff, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 
	0xfd, 0xff, 0xdf, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, 
	0xff, 0xdf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, 0xff, 
	0xef, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0xff, 0xee, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0xff, 0xec, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xf0, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00
};

void displayTransformersLogo(){
  display.clearDisplay();
  display.drawBitmap(0,0,Autobot_logo, 120, 60, 1);//(x,y,bitmap_name,width,height,1)
  display.display();
  delay(1000);
}
